'''
Author: Marjolen Droog
Date: January 3th, 2019
This script follows the pipeline for Single Cell RNA seq data (following CEL-Seq2 protocol)
For a treatment and control tissue, it can separate cells according to cell-type, and show 
differential gene expression between treatment and control per cell-type
'''

# Load required packages
library(data.table)
library(tidyverse)
library(gdata)

# creates a vector of characterstrings of the names of folder (containing all transcript counts of a condition)
folders <- c(list.dirs(path = "./01. Transcript Counts", full.names = TRUE, recursive = F))

# data.table/data.frame of which cluster belongs to which cell type
cluster <- fread('./cluster.csv') # you have to add this list in '.csv' format in the working directory 
celltype_list <- list()
for (i in 1:nrow(cluster[,1])){
  celltype <- as.numeric(as.vector(cluster[i,]))
  celltype <- celltype[!is.na(celltype)]
  celltype_list[[cluster$V1[i]]] <- celltype}

# read in rds file (two conditions that will be compared to each other)
sc <- readRDS(paste("./output/", "sc_", paste(gsub('./01. Transcript Counts/','',folders[1:length(folders)]), collapse = "_"), ".rds", sep =""))

# list with cells (plate-well position) that belong to a cell-type 
clusters_list <- list()
for (i in 1:length(celltype_list)){
  cell_clusters <- data.frame(CELLID=names(sc@cpart),cluster=sc@cpart)
  clusters_list[[paste("cells_", 
                       names(celltype_list)[i], 
                       sep = "")]] <- rownames(cell_clusters[cell_clusters[,2]%in%celltype_list[[i]],])}

# Sepate above lists into sham and IR per cell-type
IR_Sham_list <- list()
for(i in 1:length(clusters_list)){
  test <- as.data.frame(t(rbind(clusters_list[[i]], clusters_list[[i]])))
  test <- separate(data = test, col = "V1", into = c("condition"), sep = "_" )
  test <- separate(data = test, col = "condition", into = c("timepoint", "condition"), sep = "dp" )
  sham <- filter(test, condition == 'S')
  IR <- filter(test, condition == 'IR')
  list <- list(sham = sham$V2 , IR = IR$V2)
  IR_Sham_list[[names(clusters_list[i])]] <- list
}

# read in rds file (merged file of two conditions that will be compared to each other)
merged_all <- readRDS(paste("./output/", "merged_", paste(gsub('./01. Transcript Counts/','',folders[1:length(folders)]), collapse = "_"), ".rds", sep =""))


# create a second output folder to store results
if (!dir.exists(file.path("./Output2/"))){
  dir.create(file.path("./Output2/"))
}

# remove all unnecesary elements from the global environment
rm(i)
rm(celltype)
rm(cluster)
rm(test)
rm(sham)
rm(IR)
rm(list)
rm(folders)

data <- readRDS('./Output/input_1dpIR_1dpS.rds')

for(i in 1:length(clusters_list)){
  
  # create folders to store the result in Output2
  if (!dir.exists(file.path(paste('./Output2/',names(clusters_list[i]), sep = "")))){
    dir.create(file.path(paste('./Output2/',names(clusters_list[i]), sep = "")))
  }
  
  input <- data[,clusters_list[[i]]]
  outputfolder <- names(clusters_list[i]) 
  #Initiate RaceID 
  source("01. RaceID3_StemID2.R") # Don't source before you merged all the plates!
  sc <- SCseq(input)
  sc <- filterdata(sc, mintotal=1000, minexpr=5, minnumber=1, maxexpr=Inf, downsample=T, dsn=1, rseed=17000)
  sc <- clustexp(sc,clustnr=30,bootnr=50,metric="pearson",do.gap=FALSE,sat=TRUE,SE.method="Tibs2001SEmax",SE.factor=.25,B.gap=50,cln=0,rseed=17000,FUNcluster="kmedoids")
  sc <- comptsne(sc, rseed=15555)
  sc <- findoutliers(sc, outminc=5,outlg=4,probthr=1e-15,thr=2**-(1:40),outdistquant=.95)
  write_rds(x = sc, path = paste(paste('./Output2/',names(clusters_list[i]), '/', sep = ""), "sc_", names(clusters_list[i]), ".rds", sep =""))
  
  ## Functions showing expression of gene of interest in t-SNE map on a log scale
  hlgene_log<- function(gene){
    g<-rownames(sc@ndata)[grep(gene, rownames(sc@ndata))]
    if ( length(g) == 1 ){
      plotexptsne(sc, g, n = gene, logsc=T)
    } else { print ("check your gene name")}}
  
  vector_marker2 <- fread("Genes2.csv")
  for(j in 1:nrow(vector_marker2)){
    tryCatch({ 
      n = vector_marker2[j,1]
      g<-rownames(sc@ndata)[grep(n, rownames(sc@ndata))] 
      if (length(g) == 1 ){
        x <- paste(j, ". ", vector_marker2[j,2], ". ", vector_marker2[j,1], sep = "")
        pdf(paste("./Output2/", outputfolder, '/' ,x, ".pdf", sep = ""))
        plotexptsne(sc, g, n, logsc=T)
        dev.off()}}, 
      error=function(i){return('oeps')})
  }
  
  # Parameter settings that were used per analysis
  fpar <- data.frame(parameter = names(sc@filterpar[-c(8,9)]), #these are the filter settings
                     setting = c(sc@filterpar[[1]], 
                                 sc@filterpar[[2]], 
                                 sc@filterpar[[3]], 
                                 sc@filterpar[[4]],  
                                 as.character(sc@filterpar[[5]]),  
                                 sc@filterpar[[6]],  
                                 as.character(sc@filterpar[[7]])))
  cpar <- data.frame(parameter = names(sc@clusterpar), # these are the cluster settings
                     setting = c(sc@clusterpar[[1]], 
                                 sc@clusterpar[[2]], 
                                 sc@clusterpar[[3]], 
                                 as.character(sc@clusterpar[[4]]),  
                                 as.character(sc@clusterpar[[5]]),  
                                 sc@clusterpar[[6]],  
                                 sc@clusterpar[[7]], 
                                 sc@clusterpar[[8]], 
                                 sc@clusterpar[[9]], 
                                 sc@clusterpar[[10]],  
                                 sc@clusterpar[[11]],  
                                 as.character(sc@clusterpar[[12]]))) 
  par_list <- list(filter = fpar, clusters = cpar, outlier = sc@outlierpar)
  require(openxlsx)
  
  write.xlsx(par_list, 
             file = paste('./Output2/',outputfolder, '/', "parameters", ".xlsx", sep = ""), 
             header = TRUE, 
             row.names = TRUE)
  
  # Cell cluster size 
  cell_clusters <- data.frame(CELLID=names(sc@cpart),cluster=sc@cpart)
  cell_cluster_size <- data.frame(table(cell_clusters$cluster))                               
  colnames(cell_cluster_size) <- c("cluster.nr", "nr._of_cells")
  write.xlsx(cell_cluster_size, 
             file = paste('./Output2/',outputfolder, "/cluster_size.xlsx", sep = ""), 
             header = FALSE, 
             row.names = TRUE)
  
  tryCatch({ 
    # Clusters that correspond to t-SNE map and Heatmap from RACEid3_StEMid2
    cell_clusters <- data.frame(CELLID=names(sc@cpart),cluster=sc@cpart)
    cdiff <- lapply(clustdiffgenes(sc,pvalue=1), function(x) {z <- x[order(x[,3], decreasing = TRUE), ]})
    write.xlsx(cdiff, 
               file = paste('./Output2/',outputfolder, "/clusters.xlsx", sep = ""), 
               header = FALSE, 
               row.names = TRUE)}, 
    error=function(i){return(NA)})
  
  # Create RACEid plots
  pdf(paste('./Output2/',outputfolder, '/', "00. plotsaturation.pdf", sep = ""))
  plotsaturation(sc)
  dev.off()
  if(as.numeric(cell_cluster_size$cluster.nr) > 1){
    pdf(paste('./Output2/',outputfolder, '/', "00. plotjaccard.pdf", sep = ""))
    plotjaccard(sc)
    abline(h= 0.6)
    dev.off()}
  pdf(paste('./Output2/',outputfolder, '/', "00. plotoutliers.pdf", sep = ""))
  plotoutlierprobs(sc)
  dev.off()
  pdf(paste('./Output2/',outputfolder, '/', "00. k_medioids clustheatmap.pdf", sep = ""))
  clustheatmap(sc,final=TRUE,hmethod="single")
  dev.off()
  pdf(paste('./Output2/',outputfolder, '/', "00. clusters.pdf", sep = ""))
  plottsne(sc,final=TRUE)
  dev.off()
  # Differential gene analysis
  print(i)
  g1 <- levels(factor(IR_Sham_list[[i]][[1]])) # g1 = cell names group 1 
  g2 <- levels(factor(IR_Sham_list[[i]][[2]])) # g2 = cell names group 2
  x <- diffexpnb(sc@ndata, 
                 A=g1, 
                 B=g2, 
                 method="pooled",
                 norm=FALSE, 
                 DESeq=FALSE, 
                 vfit=sc@background$vfit, 
                 locreg=FALSE)
  pdf(paste('./Output2/',outputfolder, '/', "00. plotdiff.pdf", sep = ""))
  plotdiffgenesnb(x, pthr=.05, lthr=1, mthr=1, Aname="Cl.3", Bname="Cl.2,11", show_names=TRUE,padj=TRUE)
  dev.off()
  plotdiff <- x$res
  write.table(plotdiff, 
              paste('./Output2/',outputfolder, '/', names(IR_Sham_list[i]),".xls", sep = ''), 
              row.names=TRUE, col.names=NA, sep = "\t", dec = ",")
  
  # ggplot with Cell's origin: Prepare a dataframe to be used in ggplot
  tsnecord <- cbind(sc@tsne, CELLID= rownames(sc@tsne))
  tsnecord2  <- separate(data = tsnecord, col = "CELLID", into = c("condition"), sep = "_")
  # create ggplot
  cells_origin <- ggplot(tsnecord2, aes(V1, V2, color = condition)) + 
    geom_point(alpha = 0.6) + 
    ggtitle("Cell's origin") +
    labs(x = "dim1", y="dim2") +
    labs(colour="Treatment") +
    theme_bw(base_size=20) +
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(hjust=0.5)) 
  # save a ggplot to a pdf file 
  ggsave(paste('./Output2/',outputfolder, '/', "01. Cells origin.pdf", sep = ''), plot = last_plot(), device = "pdf", path =  ".",
         dpi = 300, limitsize = FALSE, scale = 1, width = NA, height = NA)
} 




